class ElevationLoader
!!!140802.java!!!	ElevationLoader(inout model : ElevationModel, inout polygon : Polygon, in index : int, in tileSideX : double, in tileSideY : double, in ptsCountsX : int, in ptsCountsY : int, in bottom : double, in magnification : double, in scaleLatFactor : double, in scaleLonFactor : double)

        this.model = model;
        this.polygon = polygon;
        this.index = index;
        this.tileSideX = tileSideX;
        this.tileSideY = tileSideY;
     //   this.ptsCountsX = ptsCountsX;
      //  this.ptsCountsY = ptsCountsY;
        this.bottom = bottom;
        this.magnification = magnification;
        this.scaleLatFactor = scaleLatFactor;
        this.scaleLonFactor = scaleLonFactor;

        // BOTTOM_STR = Double.toString(bottom);
        // bottomPositions = new ArrayList<>();
        // topPositions = new ArrayList<>();
        //  spaceX = tileSideX / (ptsCountsX - 1);
        //  spaceY = tileSideY / (ptsCountsY - 1);
!!!141058.java!!!	ElevationLoader(inout pts : Point3D, inout polygon : Polygon, in index : int, in tileSideX : double, in tileSideY : double, in spaceX : double, in spaceY : double, in bottom : double, in magnification : double, in scaleLatFactor : double, in scaleLonFactor : double)
        this.polygon = polygon;
        this.index = index;
        this.tileSideX = tileSideX;
        this.tileSideY = tileSideY;
        this.spaceX=spaceX;
        this.spaceY=spaceY;
        this.bottom = bottom;
        this.magnification = magnification;
        this.scaleLatFactor = scaleLatFactor;
        this.scaleLonFactor = scaleLonFactor;
        BOTTOM_STR = Double.toString(bottom);
        bottomPositions = new ArrayList<>();
        topPositions = new ArrayList<>();
        
!!!141186.java!!!	computeDEM(inout model : ElevationModel, inout polygon : Polygon, in index : int, in tileSideX : double, in tileSideY : double, in ptsCountsX : int, in ptsCountsY : int, in bottom : double, in magnification : double, in scaleLatFactor : double, in scaleLonFactor : double) : String
        BOTTOM_STR = Double.toString(bottom);
        bottomPositions = new ArrayList<>();
        topPositions = new ArrayList<>();
      //  spaceX = tileSideX / (ptsCountsX - 1);
      //  spaceY = tileSideY / (ptsCountsY - 1);
        String result = "";
        List<? extends Position> positions = polygon.getBoundaries().get(0);

        double latRange = (positions.get(3).getLatitude().getDegrees() - positions.get(0).getLatitude().getDegrees()) / (ptsCountsY - 1);
        double lonRange = (positions.get(0).getLongitude().getDegrees() - positions.get(1).getLongitude().getDegrees()) / (ptsCountsX - 1);

        latRange = Math.abs(latRange);
        lonRange = Math.abs(lonRange);
        double longitude = positions.get(1).getLongitude().getDegrees();
        double latitude;
        for (int i = 0; i < ptsCountsY; i++) {
            latitude = positions.get(3).getLatitude().getDegrees();
            for (int j = 0; j < ptsCountsX; j++) {
                double el = model.getElevation(Angle.fromDegrees(latitude), Angle.fromDegrees(longitude));
                if (el < 0) {
                    el = 0;
                }
                el /= magnification;
                elevationsStr += el + " ";
                bottomStr += BOTTOM_STR + " ";
                latitude -= latRange;
            }
            longitude -= lonRange;
        }
        result += createDEM(elevationsStr,
                ptsCountsX, spaceX,
                ptsCountsY, spaceY,
                "<ImageTexture DEF='Ortho' url='\"image_" + index + ".jpg\"'/> \n"
                + "<TextureTransform  rotation='-1.57' />\n",
                "Digital elevation model");

        result += createDEM(bottomStr,
                ptsCountsX, spaceX,
                ptsCountsY, spaceY,
                "\n",
                "Sea level");

        //  North face
        latitude = positions.get(3).getLatitude().getDegrees();
        longitude = positions.get(1).getLongitude().getDegrees();
        double pos = 0.0;
        topPositions.clear();
        bottomPositions.clear();

        for (int i = 0; i < ptsCountsX; i++) {
            double el = model.getElevation(Angle.fromDegrees(latitude), Angle.fromDegrees(longitude));
            el /= magnification;
            topPositions.add(new Point3D(pos, el, 0.0));
            bottomPositions.add(new Point3D(pos, bottom, 0.0));
            pos += spaceX;
            longitude -= lonRange;
        }
        result += createBoundaryFace("", bottomPositions, topPositions, TEXTURE, "North face");

        // South face
        latitude = positions.get(0).getLatitude().getDegrees();
        longitude = positions.get(1).getLongitude().getDegrees();
        pos = 0.0;
        topPositions.clear();
        bottomPositions.clear();
        for (int i = 0; i < ptsCountsX; i++) {
            double el = model.getElevation(Angle.fromDegrees(latitude), Angle.fromDegrees(longitude));
            el /= magnification;
            topPositions.add(new Point3D(pos, el, -tileSideX));
            bottomPositions.add(new Point3D(pos, bottom, -tileSideX));
            pos += spaceX;
            longitude -= lonRange;
        }

        result += createBoundaryFace("", bottomPositions, topPositions, TEXTURE, "South face");

        // East face
        double lon0 = positions.get(1).getLongitude().getDegrees();
        pos = 0.0;
        topPositions.clear();
        bottomPositions.clear();
        for (double lat = positions.get(2).getLatitude().getDegrees();
                lat > positions.get(1).getLatitude().getDegrees();
                lat -= latRange) {
            double el = model.getElevation(Angle.fromDegrees(lat), Angle.fromDegrees(lon0));
            el /= magnification;
            topPositions.add(new Point3D(0.0, el, pos));
            bottomPositions.add(new Point3D(0.0, bottom, pos));
            pos += spaceY;
        }
        result += createBoundaryFace("<Transform rotation='0 1 0 3.14116'> \n",
                bottomPositions, topPositions, TEXTURE, "East face");

        // West face
        lon0 = positions.get(0).getLongitude().getDegrees();
        pos = 0.0;
        topPositions.clear();
        bottomPositions.clear();
        for (double lat = positions.get(2).getLatitude().getDegrees();
                lat > positions.get(1).getLatitude().getDegrees();
                lat -= latRange) {
            double el = model.getElevation(Angle.fromDegrees(lat), Angle.fromDegrees(lon0));
            el /= magnification;
            topPositions.add(new Point3D(-tileSideX, el, pos));
            bottomPositions.add(new Point3D(-tileSideX, bottom, pos));
            pos += spaceY;
        }
        result += createBoundaryFace("<Transform rotation='0 1 0 3.14116'> \n",
                bottomPositions, topPositions, TEXTURE, "West face");

        return result;
!!!141314.java!!!	computeDEM(inout pts : Point3D, inout polygon : Polygon, in index : int, in tileSideX : double, in tileSideY : double, in spaceX : double, in spaceY : double, in bottom : double, in maxElevation : double, in magnification : double, in scaleLatFactor : double, in scaleLonFactor : double) : String
        BOTTOM_STR = Double.toString(bottom);
        bottomPositions = new ArrayList<>();
        topPositions = new ArrayList<>();
        spaceX = tileSideX / (ptsCountsX - 1);
        spaceY = tileSideY / (ptsCountsY - 1);
        String result = "";
        double elevationMax=0.0;
        //for(int i = 0; i < pts{
       //     if(elevationMax<p.getElevation()){
       ///         elevationMax=p.getElevation();
       //     }
       // }
        List<? extends Position> positions = polygon.getBoundaries().get(0);

        double latRange = (positions.get(3).getLatitude().getDegrees() - positions.get(0).getLatitude().getDegrees()) / (ptsCountsY - 1);
        double lonRange = (positions.get(0).getLongitude().getDegrees() - positions.get(1).getLongitude().getDegrees()) / (ptsCountsX - 1);

        latRange = Math.abs(latRange);
        lonRange = Math.abs(lonRange);
        double longitude = positions.get(1).getLongitude().getDegrees();
        double latitude;
        for (int i = 0; i < ptsCountsY; i++) {
            latitude = positions.get(3).getLatitude().getDegrees();
            for (int j = 0; j < ptsCountsX; j++) {
              //  double el = model.getElevation(Angle.fromDegrees(latitude), Angle.fromDegrees(longitude));
               double el = pts[i][j].getElevation();
              if (el < 0) {
                    el = 0;
                }
                el /= magnification;
                elevationsStr += el + " ";
                bottomStr += BOTTOM_STR + " ";
                latitude -= latRange;
            }
            longitude -= lonRange;
        }
        result += createDEM(elevationsStr,
                ptsCountsX, spaceX,
                ptsCountsY, spaceY,
                "<ImageTexture DEF='Ortho' url='\"image_" + index + ".jpg\"'/> \n"
                + "<TextureTransform  rotation='-1.57' />\n",
                "Digital elevation model");

        result += createDEM(bottomStr,
                ptsCountsX, spaceX,
                ptsCountsY, spaceY,
                "\n",
                "Sea level");

        //  North face
        latitude = positions.get(3).getLatitude().getDegrees();
        longitude = positions.get(1).getLongitude().getDegrees();
        double pos = 0.0;
        topPositions.clear();
        bottomPositions.clear();

        for (int i = 0; i < ptsCountsX; i++) {
            double el = model.getElevation(Angle.fromDegrees(latitude), Angle.fromDegrees(longitude));
            el /= magnification;
            topPositions.add(new Point3D(pos, el, 0.0));
            bottomPositions.add(new Point3D(pos, bottom, 0.0));
            pos += spaceX;
            longitude -= lonRange;
        }
        result += createBoundaryFace("", bottomPositions, topPositions, TEXTURE, "North face");

        // South face
        latitude = positions.get(0).getLatitude().getDegrees();
        longitude = positions.get(1).getLongitude().getDegrees();
        pos = 0.0;
        topPositions.clear();
        bottomPositions.clear();
        for (int i = 0; i < ptsCountsX; i++) {
            double el = model.getElevation(Angle.fromDegrees(latitude), Angle.fromDegrees(longitude));
            el /= magnification;
            topPositions.add(new Point3D(pos, el, -tileSideX));
            bottomPositions.add(new Point3D(pos, bottom, -tileSideX));
            pos += spaceX;
            longitude -= lonRange;
        }

        result += createBoundaryFace("", bottomPositions, topPositions, TEXTURE, "South face");

        // East face
        double lon0 = positions.get(1).getLongitude().getDegrees();
        pos = 0.0;
        topPositions.clear();
        bottomPositions.clear();
        for (double lat = positions.get(2).getLatitude().getDegrees();
                lat > positions.get(1).getLatitude().getDegrees();
                lat -= latRange) {
            double el = model.getElevation(Angle.fromDegrees(lat), Angle.fromDegrees(lon0));
            el /= magnification;
            topPositions.add(new Point3D(0.0, el, pos));
            bottomPositions.add(new Point3D(0.0, bottom, pos));
            pos += spaceY;
        }
        result += createBoundaryFace("<Transform rotation='0 1 0 3.14116'> \n",
                bottomPositions, topPositions, TEXTURE, "East face");

        // West face
        lon0 = positions.get(0).getLongitude().getDegrees();
        pos = 0.0;
        topPositions.clear();
        bottomPositions.clear();
        for (double lat = positions.get(2).getLatitude().getDegrees();
                lat > positions.get(1).getLatitude().getDegrees();
                lat -= latRange) {
            double el = model.getElevation(Angle.fromDegrees(lat), Angle.fromDegrees(lon0));
            el /= magnification;
            topPositions.add(new Point3D(-tileSideX, el, pos));
            bottomPositions.add(new Point3D(-tileSideX, bottom, pos));
            pos += spaceY;
        }
        result += createBoundaryFace("<Transform rotation='0 1 0 3.14116'> \n",
                bottomPositions, topPositions, TEXTURE, "West face");

        return result;
!!!141442.java!!!	createDEM(in height : String, in xDimension : int, in xSpacing : double, in zDimension : int, in zSpacing : double, in texture : String, in comment : String) : String
        String txt = " <!--" + comment + "-->\n"
                + "<Transform rotation='0 1 0 1.57058' translation='0.0 -0.1 0.0'>\n"
                + "<Shape>\n"
                + "<Appearance>\n"
                + texture
                + "<Material diffuseColor='.38 .42 .44'/> \n"
                + "</Appearance>\n"
                + "<ElevationGrid \n"
                + "ccw='true' solid='false'"
                + " xDimension='" + xDimension + "'"
                + " xSpacing='" + xSpacing + "'"
                + " zDimension='" + zDimension + "'"
                + " zSpacing='" + zSpacing + "'"
                + " height='" + height + "'/>\n"
                + "</Shape> \n"
                + "</Transform> \n";
        return txt;
!!!141570.java!!!	createBoundaryFace(in transform : String, inout bottom : List<Point3D>, inout height : List<Point3D>, in texture : String, in comment : String) : String
        String txt = " <!--" + comment + "-->\n"
                + transform + "\n"
                + "<Shape>\n"
                + "<Appearance>\n"
                + "<Material "
                + "diffuseColor='.38 .42 .44' />\n"
                + "<ImageTexture DEF='Dem Side' url='" + texture + "'/> \n"
                + "</Appearance>\n"
                + "<IndexedFaceSet colorPerVertex='false' ";

        String coordIndex = "coordIndex='";
        coordIndex += "0 1 2 3 -1,";
        coordIndex += "1 4 5 2 -1,";
        int[] tabCoord = {1, 4, 5, 2};
        int[] buff = new int[4];
        for (int i = 1; i < bottom.size() - 2; i++) {
            buff[0] = tabCoord[1];
            buff[1] = tabCoord[1] + 2;
            buff[2] = tabCoord[2] + 2;
            buff[3] = tabCoord[2];
            coordIndex += Integer.toString(buff[0]) + " "
                    + Integer.toString(buff[1]) + " "
                    + Integer.toString(buff[2]) + " "
                    + Integer.toString(buff[3]) + " -1,";
            tabCoord[0] = buff[0];
            tabCoord[1] = buff[1];
            tabCoord[2] = buff[2];
            tabCoord[3] = buff[3];
        }
        coordIndex += "' solid='false'>\n";
        txt += coordIndex;

        String coord = "<Coordinate point='";
        coord += height.get(0).toString() + " ";
        coord += height.get(1).toString() + " ";
        coord += bottom.get(1).toString() + " ";
        coord += bottom.get(0).toString() + " ";
        for (int i = 2; i < bottom.size(); i++) {
            coord += height.get(i).toString() + " "
                    + bottom.get(i).toString() + " ";
        }
        coord += "' /> \n";
        txt += coord;

        txt += " </IndexedFaceSet> \n"
                + "</Shape> \n";
        if (!transform.equals("")) {
            txt += "</Transform> \n";
        }
        return txt;
