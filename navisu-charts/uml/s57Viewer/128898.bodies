class S57DBComponentController
!!!130178.java!!!	S57DBComponentController(inout component : S57DBComponentImpl, in componentKeyName : String, inout keyCode : KeyCode, inout keyCombination : KeyCombination.Modifier, inout guiAgentServices : GuiAgentServices, inout layersManagerServices : LayersManagerServices, inout layerTreeServices : LayerTreeServices, inout s57ChartComponentServices : S57ChartComponentServices, inout databaseServices : DatabaseServices, inout instrumentDriverManagerServices : InstrumentDriverManagerServices, inout topologyServices : TopologyServices, inout jtsServices : JTSServices, inout shapefileObjectServices : ShapefileObjectServices, inout displayServices : DisplayServices, inout delaunayServices : DelaunayServices)
        super(keyCode, keyCombination);
        this.componentKeyName = componentKeyName;
        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(FXML));
        fxmlLoader.setRoot(this);
        fxmlLoader.setController(this);
        try {
            fxmlLoader.load();
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, ex.toString(), ex);
        }
        String uri = CSS_STYLE_PATH + viewgroupstyle;
        view.getStylesheets().add(uri);
        this.component = component;
        this.guiAgentServices = guiAgentServices;
        this.layersManagerServices = layersManagerServices;
        this.layerTreeServices = layerTreeServices;
        this.databaseServices = databaseServices;
        this.instrumentDriverManagerServices = instrumentDriverManagerServices;
        this.topologyServices = topologyServices;
        this.jtsServices = jtsServices;
        this.shapefileObjectServices = shapefileObjectServices;
        this.displayServices = displayServices;
        this.delaunayServices = delaunayServices;
        guiAgentServices.getScene().addEventFilter(KeyEvent.KEY_RELEASED, this);
        guiAgentServices.getRoot().getChildren().add(this);

        //layerTreeServices.createGroup(GROUP_2);
        bathymetryLayer = layersManagerServices.getLayer(GROUP_0, BATHYMETRY_LAYER);
        depareLayer = layersManagerServices.getLayer(GROUP_0, DEPARE_LAYER);
        depare3DLayer = layersManagerServices.getLayer(GROUP_0, DEPARE_3D_LAYER);
        simpleDepareLayer = layersManagerServices.getLayer(GROUP_0, DEPARE_SIMPLE_LAYER);
        buoyageLayer = layersManagerServices.getLayer(GROUP_0, BUOYAGE_LAYER);
        harbourLayer = layersManagerServices.getLayer(GROUP_0, HARBOUR_LAYER);
        areaLayer = layersManagerServices.getLayer(GROUP_0, AREA_LAYER);
        buildingLayer = layersManagerServices.getLayer(GROUP_0, BUILDING_LAYER);
        earthLayer = layersManagerServices.getLayer(GROUP_0, EARTH_LAYER);
        navigationLayer = layersManagerServices.getLayer(GROUP_0, NAVIGATION_LAYER);
        dangersLayer = layersManagerServices.getLayer(GROUP_0, DANGERS_LAYER);
        cblsubLayer = layersManagerServices.getLayer(GROUP_0, CBLSUB_LAYER);
        lightsLayer = layersManagerServices.getLayer(GROUP_0, LIGHTS_LAYER);
        lightsSectorsLayer = layersManagerServices.getLayer(GROUP_0, LIGHTS_SECTORS_LAYER);
!!!130306.java!!!	initialize(inout location : URL, inout resources : ResourceBundle) : void
        databasesCB.setItems(dbCbData);
        databasesCB.getSelectionModel().select("s57NP5DB");
        databaseTF.setText("s57NP5DB");
        databasesCB.getSelectionModel()
                .selectedItemProperty()
                .addListener(
                        (ObservableValue<? extends String> observable, String oldValue, String newValue)
                        -> databaseTF.setText(databasesCB.getValue())
                );
        objectsCB.setItems(objectsCbData);
        // initCheckBox( "properties/objects_1.csv", objectsCB);
        objectsCB.getSelectionModel().select("ALL : All S57 objects");
        objectsTF.setText("ALL");
        objectsCB.getSelectionModel()
                .selectedItemProperty()
                .addListener(
                        (ObservableValue<? extends String> observable, String oldValue, String newValue)
                        -> {
                    String[] v = newValue.split(":");
                    objectsTF.setText(v[0]);
                }
                );

        quit.setOnMouseClicked((MouseEvent event) -> {
            component.off();
        });
        helpButton.setOnMouseClicked((MouseEvent event) -> {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Options");
            alert.setHeaderText("Display S57 objects");
            Text s = new Text(
                    "    Choice database with scale :\n\n"
                    + "    s57NP1DB - Overview 	< 1 : 1 500 000\n"
                    + "    s57NP2DB - General 	1 : 350 000 à 1 : 1 500 000\n"
                    + "    s57NP3DB - Coastal 	1 : 90 000 à 1 : 350 000\n"
                    + "    s57NP4DB - Approach 	1 : 22 000 à 1 : 90 000\n"
                    + "    s57NP5DB - Harbour 	1 : 4 000 à 1 : 22 000\n"
                    + "    s57NP6DB - Berthing 	> 1 : 4 000\n\n"
                    + "    Selection of objects to display");
            s.setWrappingWidth(650);
            alert.getDialogPane().setContent(s);
            alert.show();
        });
        latLonButton.setOnMouseClicked((MouseEvent event) -> {
            Platform.runLater(() -> {
                initSelectedZone();
            });
        });
        interactiveButton.setOnMouseClicked((MouseEvent event) -> {
            measureTool = new MeasureTool(wwd);
            MeasureToolController measureToolController = new MeasureToolController();
            measureTool.setController(measureToolController);
            measureTool.setMeasureShapeType(MeasureTool.SHAPE_SQUARE);
            measureTool.setArmed(true);
        });
        selectedButton.setOnMouseClicked((MouseEvent event) -> {
            if (measureTool != null) {
                List<? extends Position> positions = measureTool.getPositions();
                if (!positions.isEmpty()) {
                    lat0 = positions.get(0).getLatitude().getDegrees();
                    lon0 = positions.get(0).getLongitude().getDegrees();
                    lat1 = positions.get(2).getLatitude().getDegrees();
                    lon1 = positions.get(2).getLongitude().getDegrees();

                    latMinLabel.setText(String.format("%.2f", lat0));
                    lonMinLabel.setText(String.format("%.2f", lon0));
                    latMaxLabel.setText(String.format("%.2f", lat1));
                    lonMaxLabel.setText(String.format("%.2f", lon1));
                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error");
                    alert.setHeaderText("Sélectionnez une zone d'acquisition");
                    alert.show();
                }
                measureTool.setArmed(false);
                measureTool.dispose();
            }

        });

        requestButton.setOnMouseClicked((MouseEvent event) -> {
            if (bathymetryLayer.getNumRenderables() != 0) {
                bathymetryLayer.removeAllRenderables();
            }
            if (buoyageLayer.getNumRenderables() != 0) {
                buoyageLayer.removeAllRenderables();
            }
            if (harbourLayer.getNumRenderables() != 0) {
                harbourLayer.removeAllRenderables();
            }
            if (depare3DLayer.getNumRenderables() != 0) {
                depare3DLayer.removeAllRenderables();
            }
            if (simpleDepareLayer.getNumRenderables() != 0) {
                simpleDepareLayer.removeAllRenderables();
            }
            if (depareLayer.getNumRenderables() != 0) {
                depareLayer.removeAllRenderables();
            }
            if (areaLayer.getNumRenderables() != 0) {
                areaLayer.removeAllRenderables();
            }
            if (buildingLayer.getNumRenderables() != 0) {
                buildingLayer.removeAllRenderables();
            }
            if (earthLayer.getNumRenderables() != 0) {
                earthLayer.removeAllRenderables();
            }
            if (navigationLayer.getNumRenderables() != 0) {
                navigationLayer.removeAllRenderables();
            }
            if (dangersLayer.getNumRenderables() != 0) {
                dangersLayer.removeAllRenderables();
            }
            if (cblsubLayer.getNumRenderables() != 0) {
                cblsubLayer.removeAllRenderables();
            }
            if (lightsLayer.getNumRenderables() != 0) {
                lightsLayer.removeAllRenderables();
            }
            if (lightsSectorsLayer.getNumRenderables() != 0) {
                lightsSectorsLayer.removeAllRenderables();
            }
            connection = databaseServices.connect(databaseTF.getText(),
                    "localhost", "jdbc:postgresql://", "5432", "org.postgresql.Driver", USER, PASSWD);
            if (lat0 != 0 && lon0 != 0 && lat1 != 0 && lon1 != 0) {
                retrieveIn(objectsTF.getText(), lat0, lon0, lat1, lon1);
            } else {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Lat and Lon fields must be filled \n"
                        + "Range latitude : -90° <= Latitude <= 90° \n"
                        + "Range longitude : -180° <= Longitude <= 180°");
                alert.show();
            }
        });

!!!130434.java!!!	initSelectedZone() : void

        Dialog dialog = new Dialog<>();
        dialog.setTitle("Create Area");
        dialog.setHeaderText("Please enter selected area coordinates.");
        dialog.setResizable(false);

        Label lat0Label = new Label("Northwest point latitude : ");
        Label lon0Label = new Label("Northwest point longitude : ");
        Label lat1Label = new Label("Southeast point latatitude : ");
        Label lon1Label = new Label("Southeast point longitude : ");

        TextField lat0TF = new TextField();
        TextField lat1TF = new TextField();
        TextField lon0TF = new TextField();
        TextField lon1TF = new TextField();

        //Default values
        lat0TF.setText("48.21");
        lat1TF.setText("48.42");
        lon0TF.setText("-4.61");
        lon1TF.setText("-4.30");

        GridPane grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(20, 35, 20, 35));
        grid.add(lat0Label, 0, 0);
        grid.add(lat0TF, 1, 0);
        grid.add(lon0Label, 0, 1);
        grid.add(lon0TF, 1, 1);

        grid.add(lat1Label, 0, 2);
        grid.add(lat1TF, 1, 2);
        grid.add(lon1Label, 0, 3);
        grid.add(lon1TF, 1, 3);

        dialog.getDialogPane().setContent(grid);
        dialog.getDialogPane().getButtonTypes().add(ButtonType.OK);
        Button okButton = (Button) dialog.getDialogPane().lookupButton(ButtonType.OK);
        okButton.addEventFilter(ActionEvent.ACTION, event -> {
            try {
                lat0 = Double.valueOf(lat0TF.getText().trim());
                lon0 = Double.valueOf(lon0TF.getText().trim());
                lat1 = Double.valueOf(lat1TF.getText().trim());
                lon1 = Double.valueOf(lon1TF.getText().trim());
            } catch (NumberFormatException e) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Range latitude : -90° <= Latitude <= 90° \n"
                        + "Range longitude : -180° <= Longitude <= 180°");
                alert.show();
            }
            if (lat0 < -90.0 || lat0 > 90.0 || lat1 < -90.0 || lat1 > 90.0) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Range latitude : -90° <= Latitude <= 90°");
                alert.show();
            }
            if (lon0 < -180.0 || lon0 > 180.0 || lon1 < -180.0 || lon1 > 180.0) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Range longitude : -180° <= Lonitude <= 180°");
                alert.show();
            }
            event.consume();
            dialog.close();
            latMinLabel.setText(Double.toString(lat0));
            lonMinLabel.setText(Double.toString(lon0));
            latMaxLabel.setText(Double.toString(lat1));
            lonMaxLabel.setText(Double.toString(lon1));
        });
        dialog.getDialogPane().getButtonTypes().add(ButtonType.CANCEL);
        dialog.showAndWait();
!!!130562.java!!!	retrieveIn(in object : String, in latMin : double, in lonMin : double, in latMax : double, in lonMax : double) : void

        ShapeAttributes normalAttributes = new BasicShapeAttributes();
        normalAttributes.setOutlineMaterial(Material.RED);
        normalAttributes.setOutlineOpacity(0.5);
        normalAttributes.setOutlineWidth(2);
        normalAttributes.setDrawOutline(true);
        normalAttributes.setDrawInterior(false);
        // Create a polygon, set some of its properties and set its attributes.
        ArrayList<Position> pathPositions = new ArrayList<>();
        pathPositions.add(Position.fromDegrees(lat0, lon0, 100));
        pathPositions.add(Position.fromDegrees(lat0, lon1, 100));
        pathPositions.add(Position.fromDegrees(lat1, lon1, 100));
        pathPositions.add(Position.fromDegrees(lat1, lon0, 100));
        pathPositions.add(Position.fromDegrees(lat0, lon0, 100));

        Polygon pgon = new Polygon(pathPositions);
        pgon.setAttributes(normalAttributes);
        depare3DLayer.addRenderable(pgon);
        wwd.redrawNow();

        //Define TopMak for all buoyages, default is 0 : no topmark
        TopmarDBLoader topmarDbLoader = new TopmarDBLoader(connection);
        topMarkMap = topmarDbLoader.retrieveIn(latMin, lonMin, latMax, lonMax);

        //Define IALA system for all buoyages, default is 1
        MnsysDBLoader mnsysDbLoader = new MnsysDBLoader(connection);
        marsysMap = mnsysDbLoader.retrieveIn(latMin, lonMin, latMax, lonMax);

        if (object.trim().equals("ALL") || object.trim().equals("BUOYAGE")) {
            //Create a loader for BeaconCardinal, Retrieve all BeaconCardinals in a rectangle latMin, lonMin, latMax, lonMax
            BuoyageDBLoader buoyageDbLoader = new BuoyageDBLoader(connection, "BCNCAR", marsysMap);
            List<Buoyage> buoyages = buoyageDbLoader.retrieveIn(latMin, lonMin, latMax, lonMax);

            //Create a S57Viewer for Buoyage,Display all buoyages retrieved
            BuoyageView buoyageView = new BuoyageView(topMarkMap, buoyageLayer, "BCNCAR");
            buoyageView.display(buoyages);

            new BuoyageView(topMarkMap, buoyageLayer, "BCNLAT")
                    .display(new BuoyageDBLoader(connection, "BCNLAT", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new BuoyageView(topMarkMap, buoyageLayer, "BCNISD")
                    .display(new BuoyageDBLoader(connection, "BCNISD", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new BuoyageView(topMarkMap, buoyageLayer, "BCNSAW")
                    .display(new BuoyageDBLoader(connection, "BCNSAW", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new BuoyageView(topMarkMap, buoyageLayer, "BCNSPP")
                    .display(new BuoyageDBLoader(connection, "BCNSPP", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new BuoyageView(topMarkMap, buoyageLayer, "BCNISD")
                    .display(new BuoyageDBLoader(connection, "BCNISD", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new BuoyageView(topMarkMap, buoyageLayer, "BOYCAR")
                    .display(new BuoyageDBLoader(connection, "BOYCAR", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new BuoyageView(topMarkMap, buoyageLayer, "BOYLAT")
                    .display(new BuoyageDBLoader(connection, "BOYLAT", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new BuoyageView(topMarkMap, buoyageLayer, "BOYINB")
                    .display(new BuoyageDBLoader(connection, "BOYINB", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new BuoyageView(topMarkMap, buoyageLayer, "BOYISD")
                    .display(new BuoyageDBLoader(connection, "BOYISD", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new BuoyageView(topMarkMap, buoyageLayer, "BOYSAW")
                    .display(new BuoyageDBLoader(connection, "BOYSAW", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new BuoyageView(topMarkMap, buoyageLayer, "BOYSPP")
                    .display(new BuoyageDBLoader(connection, "BOYSPP", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new DaymarView(topMarkMap, harbourLayer, "DAYMAR")
                    .display(new DaymarDBLoader(connection, "DAYMAR", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
            new BuoyageView(topMarkMap, buoyageLayer, "MORFAC")
                    .display(new BuoyageDBLoader(connection, "MORFAC", marsysMap)
                            .retrieveIn(latMin, lonMin, latMax, lonMax));
        }
        if (object.trim().equals("ALL") || object.trim().equals("PONTON")) {
            new PontonView(topologyServices, harbourLayer)
                    .display(new PontoonDBLoader(connection, "PONTON")
                            .retrieveGeometriesIn(latMin, lonMin, latMax, lonMax));
        }
        if (object.trim().equals("ALL") || object.trim().equals("DEPARE")) {
            guiAgentServices.getJobsManager().newJob("Load depth area", (progressHandle) -> {
                new DepareView(latMin, lonMin, latMax, lonMax,
                        depareLayer, simpleDepareLayer, depare3DLayer,
                        Double.valueOf(simplifyTF.getText()),
                        Double.valueOf(depthMagnificationTF.getText()),
                        createElevationCB.isSelected())
                        .display(new DepareDBLoader(databaseServices,
                                databaseTF.getText(),
                                USER,
                                PASSWD).retrieveIn(latMin, lonMin, latMax, lonMax));
            });
        }
        if (object.trim().equals("ALL") || object.trim().equals("DEPCNT")) {
            guiAgentServices.getJobsManager().newJob("Load contours", (progressHandle) -> {
                objects = new DepthContourDBLoader(topologyServices, connection)
                        .retrieveObjectsIn(latMin, lonMin, latMax, lonMax);
                s57Viewer = new S57Viewer(topologyServices, depareLayer);
                objects.forEach((g) -> {
                    s57Viewer.display(g);
                });
                wwd.redrawNow();
            });
        }
        if (object.trim().equals("ALL") || object.trim().equals("COALNE")) {
            guiAgentServices.getJobsManager().newJob("Load coastaline", (progressHandle) -> {
                new CoastalineView(topologyServices, harbourLayer)
                        .display(new CoastlineDBLoader(connection, "COALNE")
                                .retrieveGeometriesIn(latMin, lonMin, latMax, lonMax));
            });
        }
        if (object.trim().equals("ALL") || object.trim().equals("SLCONS")) {
            guiAgentServices.getJobsManager().newJob("Load shore line construction", (progressHandle) -> {
                new ShorelineConstructionView(topologyServices, harbourLayer)
                        .display(new ShorelineConstructionDBLoader(connection, "SLCONS")
                                .retrieveGeometriesIn(latMin, lonMin, latMax, lonMax));
            });
        }
!!!130690.java!!!	getConnection() : Connection
        return connection;
!!!130818.java!!!	getS57Objects(inout t : Geo, in latMin : double, in lonMin : double, in latMax : double, in lonMax : double) : List<? extends Geo>
        //Faire une Map avec les classes et les loader

        return null;
